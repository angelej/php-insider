#!/usr/bin/env php
<?php declare(strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Angelej\PhpInsider\File;
use Angelej\PhpInsider\Analyser;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use function Termwind\{render};

$app = new Application();
$app->register('analyse')
    ->addArgument('file', InputArgument::REQUIRED, 'File or directory path to analyse')
    ->addOption('extension', '-e', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'File extension', ['php'])
    ->addOption('exclude-file', null, InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'File or directory to exclude', [])
    ->addOption('lines', '-l', InputOption::VALUE_REQUIRED, 'Number of lines to expand code snippet', 2)
    ->setCode(function(InputInterface $input, OutputInterface $output): int {

        $extensions = array_map(function($ext){
            return ltrim(trim($ext), '.');
        }, $input->getOption('extension'));

        $excludedFiles = $input->getOption('exclude-file');
        $file = $input->getArgument('file');
        $files = is_dir($file) ? File::glob($file, $extensions, $excludedFiles) : new File($file);
        $report = (new Analyser())->analyse($files);
        $expandLines = max((int) $input->getOption('lines'), 0);

        foreach($report->get() as $sink){

            $location = $sink->getLocation();
            $classNode = $location->getClassNode();
            $line = $location->getLine();
            $startLine = max($line - $expandLines, 1);
            $codeSnippet = $location->getCodeSnippet($expandLines);
            $classHtml = $classNode ? "<span>(class: <em>{$classNode?->name}</em>)</span>" : '';

            render(<<<TERMWIND
                <div class="ml-2 mb-1">
                    <span class="px-1 font-bold bg-red-600 text-black">{$sink->getSinkName()}</span> found in file {$location->getPathname()}
                    {$classHtml}
                    <code line="{$line}" start-line="{$startLine}">{$codeSnippet}</code>
                </div>
            TERMWIND);
        }
        return Command::SUCCESS;
    });
$app->run();